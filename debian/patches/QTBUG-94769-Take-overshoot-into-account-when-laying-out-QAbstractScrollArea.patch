Author: Zhang Hao <zhanghao@uniontech.com>
Date:   Fri Oct 15 10:06:12 2021 +0800
Subject: Take overshoot into account when laying out QAbstractScrollArea
Upstream: https://codereview.qt-project.org/c/qt/qtbase/+/357025
---

Index: qtbase-opensource-src/src/widgets/widgets/qabstractscrollarea.cpp
===================================================================
--- qtbase-opensource-src.orig/src/widgets/widgets/qabstractscrollarea.cpp
+++ qtbase-opensource-src/src/widgets/widgets/qabstractscrollarea.cpp
@@ -532,7 +532,10 @@ void QAbstractScrollAreaPrivate::layoutC
     else
         viewportRect.adjust(left, top, -right, -bottom);
 
-    viewport->setGeometry(QStyle::visualRect(opt.direction, opt.rect, viewportRect)); // resize the viewport last
+    viewportRect = QStyle::visualRect(opt.direction, opt.rect, viewportRect);
+    viewportRect.translate(-overshoot);
+    viewport->setGeometry(viewportRect); // resize the viewport last
+
     *needHorizontalScrollbar = needh;
     *needVerticalScrollbar = needv;
 }
Index: qtbase-opensource-src/tests/auto/widgets/widgets/qabstractscrollarea/tst_qabstractscrollarea.cpp
===================================================================
--- qtbase-opensource-src.orig/tests/auto/widgets/widgets/qabstractscrollarea/tst_qabstractscrollarea.cpp
+++ qtbase-opensource-src/tests/auto/widgets/widgets/qabstractscrollarea/tst_qabstractscrollarea.cpp
@@ -37,6 +37,7 @@
 #include <qlabel.h>
 #include <qwidget.h>
 #include <qdialog.h>
+#include <qscroller.h>
 
 class tst_QAbstractScrollArea : public QObject
 {
@@ -57,6 +58,7 @@ private slots:
     void task214488_layoutDirection();
 
     void margins();
+    void resizeWithOvershoot();
 };
 
 tst_QAbstractScrollArea::tst_QAbstractScrollArea()
@@ -388,5 +390,42 @@ void tst_QAbstractScrollArea::margins()
     QCOMPARE(area.viewportMargins(), margins);
 }
 
+void tst_QAbstractScrollArea::resizeWithOvershoot()
+{
+    QWidget window;
+
+    QScrollArea scrollArea(&window);
+    scrollArea.setWidget([]{
+        QWidget *widget = new QWidget;
+        widget->setFixedSize(QSize(0, 200));
+        return widget;
+    }());
+    scrollArea.setGeometry(0, 20, 100, 100);
+
+    QScroller::grabGesture(&scrollArea, QScroller::LeftMouseButtonGesture);
+
+    window.show();
+    QVERIFY(QTest::qWaitForWindowExposed(&window));
+
+    const QPoint originAtRest = scrollArea.viewport()->pos();
+
+    QPoint center = scrollArea.viewport()->mapToGlobal(scrollArea.viewport()->rect().center());
+    center = window.windowHandle()->mapFromGlobal(center);
+    QTest::mousePress(window.windowHandle(), Qt::LeftButton, {}, center);
+    QTest::mouseMove(window.windowHandle(), center + QPoint(0, 50));
+    QTRY_COMPARE(scrollArea.viewport()->pos(), originAtRest + QPoint(0, 25));
+    QPoint overshootPosition = scrollArea.viewport()->pos();
+
+    // trigger a layout of the scroll area while there's overshoot
+    scrollArea.setGeometry(0, 0, 100, 120);
+    QCOMPARE(scrollArea.viewport()->pos(), overshootPosition);
+    QTest::mouseRelease(window.windowHandle(), Qt::LeftButton, {}, center + QPoint(0, 50));
+    QTRY_COMPARE(scrollArea.viewport()->pos(), originAtRest);
+    // Process a few more events and verify that the scroll area
+    // doesn't overcompensate for the overshoot.
+    QApplication::processEvents();
+    QTRY_COMPARE(scrollArea.viewport()->pos(), originAtRest);
+}
+
 QTEST_MAIN(tst_QAbstractScrollArea)
 #include "tst_qabstractscrollarea.moc"
