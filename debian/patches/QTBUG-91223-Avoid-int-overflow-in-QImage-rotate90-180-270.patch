Author: Zhang Hao <zhanghao@uniontech.com>
Date:   Tue Jan 11 20:03:33 2022 +0800
Subject: Avoid int overflow in QImage rotate90/180/270
Upstream: https://codereview.qt-project.org/c/qt/qtbase/+/336121
---

Index: qtbase-opensource-src/src/gui/painting/qmemrotate.cpp
===================================================================
--- qtbase-opensource-src.orig/src/gui/painting/qmemrotate.cpp
+++ qtbase-opensource-src/src/gui/painting/qmemrotate.cpp
@@ -47,8 +47,8 @@ template <class T>
 static
 inline void qt_memrotate90_tiled(const T *src, int w, int h, int sstride, T *dest, int dstride)
 {
-    sstride /= sizeof(T);
-    dstride /= sizeof(T);
+    const qsizetype isstride = sstride / sizeof(T);
+    const qsizetype idstride = dstride / sizeof(T);
 
     const int pack = sizeof(quint32) / sizeof(T);
     const int unaligned =
@@ -65,9 +65,9 @@ inline void qt_memrotate90_tiled(const T
 
         if (unaligned) {
             for (int x = startx; x >= stopx; --x) {
-                T *d = dest + (w - x - 1) * dstride;
+                T *d = dest + (w - x - 1) * idstride;
                 for (int y = 0; y < unaligned; ++y) {
-                    *d++ = src[y * sstride + x];
+                    *d++ = src[y * isstride + x];
                 }
             }
         }
@@ -77,12 +77,12 @@ inline void qt_memrotate90_tiled(const T
             const int stopy = qMin(starty + tileSize, h - unoptimizedY);
 
             for (int x = startx; x >= stopx; --x) {
-                quint32 *d = reinterpret_cast<quint32*>(dest + (w - x - 1) * dstride + starty);
+                quint32 *d = reinterpret_cast<quint32*>(dest + (w - x - 1) * idstride + starty);
                 for (int y = starty; y < stopy; y += pack) {
-                    quint32 c = src[y * sstride + x];
+                    quint32 c = src[y * isstride + x];
                     for (int i = 1; i < pack; ++i) {
                         const int shift = (sizeof(T) * 8 * i);
-                        const T color = src[(y + i) * sstride + x];
+                        const T color = src[(y + i) * isstride + x];
                         c |= color << shift;
                     }
                     *d++ = c;
@@ -93,9 +93,9 @@ inline void qt_memrotate90_tiled(const T
         if (unoptimizedY) {
             const int starty = h - unoptimizedY;
             for (int x = startx; x >= stopx; --x) {
-                T *d = dest + (w - x - 1) * dstride + starty;
+                T *d = dest + (w - x - 1) * idstride + starty;
                 for (int y = starty; y < h; ++y) {
-                    *d++ = src[y * sstride + x];
+                    *d++ = src[y * isstride + x];
                 }
             }
         }
@@ -107,6 +107,8 @@ static
 inline void qt_memrotate90_tiled_unpacked(const T *src, int w, int h, int sstride, T *dest,
                                           int dstride)
 {
+    const qsizetype isstride = sstride;
+    const qsizetype idstride = dstride;
     const int numTilesX = (w + tileSize - 1) / tileSize;
     const int numTilesY = (h + tileSize - 1) / tileSize;
 
@@ -119,11 +121,11 @@ inline void qt_memrotate90_tiled_unpacke
             const int stopy = qMin(starty + tileSize, h);
 
             for (int x = startx; x >= stopx; --x) {
-                T *d = (T *)((char*)dest + (w - x - 1) * dstride) + starty;
-                const char *s = (const char*)(src + x) + starty * sstride;
+                T *d = (T *)((char*)dest + (w - x - 1) * idstride) + starty;
+                const char *s = (const char*)(src + x) + starty * isstride;
                 for (int y = starty; y < stopy; ++y) {
                     *d++ = *(const T *)(s);
-                    s += sstride;
+                    s += isstride;
                 }
             }
         }
@@ -134,8 +136,8 @@ template <class T>
 static
 inline void qt_memrotate270_tiled(const T *src, int w, int h, int sstride, T *dest, int dstride)
 {
-    sstride /= sizeof(T);
-    dstride /= sizeof(T);
+    const qsizetype isstride = sstride / sizeof(T);
+    const qsizetype idstride = dstride / sizeof(T);
 
     const int pack = sizeof(quint32) / sizeof(T);
     const int unaligned =
@@ -152,9 +154,9 @@ inline void qt_memrotate270_tiled(const
 
         if (unaligned) {
             for (int x = startx; x < stopx; ++x) {
-                T *d = dest + x * dstride;
+                T *d = dest + x * idstride;
                 for (int y = h - 1; y >= h - unaligned; --y) {
-                    *d++ = src[y * sstride + x];
+                    *d++ = src[y * isstride + x];
                 }
             }
         }
@@ -164,13 +166,13 @@ inline void qt_memrotate270_tiled(const
             const int stopy = qMax(starty - tileSize, unoptimizedY);
 
             for (int x = startx; x < stopx; ++x) {
-                quint32 *d = reinterpret_cast<quint32*>(dest + x * dstride
+                quint32 *d = reinterpret_cast<quint32*>(dest + x * idstride
                                                         + h - 1 - starty);
                 for (int y = starty; y >= stopy; y -= pack) {
-                    quint32 c = src[y * sstride + x];
+                    quint32 c = src[y * isstride + x];
                     for (int i = 1; i < pack; ++i) {
                         const int shift = (sizeof(T) * 8 * i);
-                        const T color = src[(y - i) * sstride + x];
+                        const T color = src[(y - i) * isstride + x];
                         c |= color << shift;
                     }
                     *d++ = c;
@@ -180,9 +182,9 @@ inline void qt_memrotate270_tiled(const
         if (unoptimizedY) {
             const int starty = unoptimizedY - 1;
             for (int x = startx; x < stopx; ++x) {
-                T *d = dest + x * dstride + h - 1 - starty;
+                T *d = dest + x * idstride + h - 1 - starty;
                 for (int y = starty; y >= 0; --y) {
-                    *d++ = src[y * sstride + x];
+                    *d++ = src[y * isstride + x];
                 }
             }
         }
@@ -194,6 +196,9 @@ static
 inline void qt_memrotate270_tiled_unpacked(const T *src, int w, int h, int sstride, T *dest,
                                            int dstride)
 {
+    const qsizetype isstride = sstride;
+    const qsizetype idstride = dstride;
+
     const int numTilesX = (w + tileSize - 1) / tileSize;
     const int numTilesY = (h + tileSize - 1) / tileSize;
 
@@ -206,11 +211,11 @@ inline void qt_memrotate270_tiled_unpack
             const int stopy = qMax(starty - tileSize, 0);
 
             for (int x = startx; x < stopx; ++x) {
-                T *d = (T*)((char*)dest + x * dstride) + h - 1 - starty;
-                const char *s = (const char*)(src + x) + starty * sstride;
+                T *d = (T*)((char*)dest + x * idstride) + h - 1 - starty;
+                const char *s = (const char*)(src + x) + starty * isstride;
                 for (int y = starty; y >= stopy; --y) {
                     *d++ = *(const T*)s;
-                    s -= sstride;
+                    s -= isstride;
                 }
             }
         }
@@ -249,14 +254,16 @@ template <class T>
 static
 inline void qt_memrotate180_template(const T *src, int w, int h, int sstride, T *dest, int dstride)
 {
-    const char *s = (const char*)(src) + (h - 1) * sstride;
+    const qsizetype isstride = sstride;
+    const qsizetype idstride = dstride;
+    const char *s = (const char*)(src) + (h - 1) * isstride;
     for (int dy = 0; dy < h; ++dy) {
-        T *d = reinterpret_cast<T*>((char *)(dest) + dy * dstride);
+        T *d = reinterpret_cast<T*>((char *)(dest) + dy * idstride);
         src = reinterpret_cast<const T*>(s);
         for (int dx = 0; dx < w; ++dx) {
             d[dx] = src[w - 1 - dx];
         }
-        s -= sstride;
+        s -= isstride;
     }
 }
 
